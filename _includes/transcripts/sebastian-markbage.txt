I'm Sebastian, that thing there is my last name.

I live in California now, but, um, it's actually really nice to be back in Europe where Umlauds and accents are normal occur answers. Sorry for my bad voice, I think I'm allergic for bad API.  I work for Facebook now, I'm not an evangelist, I just code stuff, I'm just some dude.  I also represent Facebook on TC 39 on standards committee on ECMAScript. Don't worry, the bad parts are not mine, they're someone else's.

I guess a lot of people here have a favorite library. There was your favorite library ‑‑ nothing?  React that's a good call. (Laughing) do you guys use libraries for everything, like the same library, like utility library, like underscore in how many people use underscore?  Cool. JQuery?  Something like Angular High Level YUY?  Oooo ... sorry, guys (Laughing) well, this is the great part about JavaScript, our community, if you look platforms like EEO, Andriod or proprietary. Do whatever the platform owner tells you that's right to do. There's a stock secret black box you can't touch, everyone tells you you can't do better than they did, which is not true, let's be honest, it's not true in the Java committee.

We have a vibrant community of framework, we have discussion and fights about how many package managers we need manage all of our libraries, I think a lot of them are called MPM actually. But do we really need this many OA's, how many ways do we fled the accessDM attributes. You know all the APIs in Ember data, do you know how many ways to filter an array just in underscore?  Is it same as well dash depending on which version you use and what you opt in to. Do you even know tall APIs in the standard JavaScript library?  What about VS 6?  Job recruiters and job descriptions are looking for experience with specific libraries, and if you know the same concept under different name, you're actually not good enough, because like you're not going to get ramped up quick enough before the company pivots, right. It's starting to get a little bit annoying with all this proliferation, but, of course, you have a solution for this, you created your own library and now there's only one thing you is to learn. It's probably super easy, solves all the educations and all the names are super easy for you to understand. How streamlined?  JavaScript JS is really hard to learn. Imagine this is like the first day and you get dropped into code based complicated weapon App, in the middle of the web App, first day you have no idea how it works how many calls in to JavaScript libraries do you see that you've never seen before. Imagine this is the life of thousands of your colleagues. We had our own core libraries at Facebook as well.

One of the most common questions we had was so which Facebook specific module corresponds to this underscore or JQue arey function?  It's not that the library is too big, the library is pretty cool. It doesn't matter if there's too many bytes, there's way to optimize and filter those, it's actually total amount of APIs that you have to learn to be productive in this industry. That's really difficult these days. And I don't think this is inherent to a diverse ecosystem.  I don't think it's inherent to programming in general.  I think I found a process that can help us minimize this problem. First of all, listen to slow moving standard organizations. Then write some spaghetti code. Never abstract until it actually causes bugs. Once it does cause a bug, subtract an abstraction and as as much surface area as you destruct if it. This doesn't sound like best practices, and no one wants to listen to slow moving standards story. Let me get back to that a little bit later. First, some history. 2005. Late 2005. It was an interesting era for the web, it was before internet explorer 7, JavaScript update for 6 years, ES 4 was being drafted, it was going to go into failure. But minimal JavaScript, the line of library we had, the community had enough, we started to take things into our own hands, and this was an era where all the libraries started to see proliferation. A lot of them were like prototype, based JS, those two heavily inspired Moo tools, which I kind of worked on a little bit. A lot of those bad things were my fault. But, of course libraries couldn't agree on a standard way of extending prototypes and having global name space so the best practice became like J curry and underscore because they had their owne own separate name space.

Then ES 5 came along and it became popular to patch prototypes again, this time it's called poly fills. A lot of those poly fills naturally replaced prototype and Moo tools because they were sharing the same name space. But, the library in their own name space, like underscore and J query lived on. They actually had better APIs at the time because there were better documented and it was easier to learn because there was no standard that you can rely on. And the rational that they still live on it's empowering to have an abstraction on top of the native feature, you with tweak performance, fix thing Ms. The speck without relying on a standards body to fix it for you. Even TC 39 for JavaScript would even argue if you're not quite happy with this, you should just use your own ten mow library and build something on top of the standards. But which one do we use?  There's at least two ways to do it now, there's the standard way, and the library way, and there's multiple libraries, we asked ourselves because we got this question a lot, should we adopt an API like popular library or underscore or maybe a little dash, but which one of them, and which version and is this going to be maintained. Do we even control the source?  Is it community driven, or is it controlled by one person?  Do we require this library from all of our source, or do we decouple it with some other dependency. So, let's take a minute to look at why we actually use JavaScript to begin with. It's not best language in the world, whatever your favorite style is, there's at least one Bert language out there that will compile down to JavaScript. We can just use that instead, right?  Well, we use JavaScript because it's ubiquitous, it's something that people could agree on.

This is why general purpose programming languages keep winning out against DSLs and custom languages. And by introducing divergence in the library community, we're actually undermining what JavaScript is great. So back at Facebook we started building source trance filers for ES 6 features, we invested a lot in E 6, we became very early adopters throughout our entire code base, we joined TC 39 to start working on ES 7. There are some problems with this technique though, there's some native functions that are shower than reimplementation of this, load ash shows this over and over again. It's easy to solve just monkey batch it, just overwry native version with one that's faster, this is a string of JavaScript that you can actually do this. Sometimes, don't tell anyone, but you can actually use Shams as well that are not quite compatible just to get the extra little performance boost, just make sure you're continuously try knoll the standards as it mosting along and also try to not expose dependencies on non‑standard behavior. There's a lot of compatibility problems with just relying on poly fills. In the early day was Spec changes a lot you basically have to live with it as a library rather than a final draft of a spec, you continuously upgrade, you can really only have one version in one realm at a time, we have a lot of solutions to solve this, another problem is that you mite have to load like a huge poly fill on an initial page load instead of doing the modular loading.

And all of this stuff is really difficult to get right, but we, and a lot of our people are trying to build Open Source tooling, to support your environment, stacked actually enable you do this. And this is all hard work, but it allowstous have a very simple story, at Facebook, we use JavaScripts standard library. There's one way to do things, and it's the standard way. And it's it avoids a very simple problem. It avoids bike shedding, bike shedding is the biggest waist of all. We leave that to standard mailing list. It reminds me the least intuitive lessons I learned from an organization. The top‑down authority is best used on the very least important decisions, not the most important decisions. For example I really recommend you force a strict and comprehensive style guide just because it avoids this discussion on every of pole request or every DIsive which style you're going to use and every person isn't going to have to fight to get their style (DIV) you might be asking yourself, JavaScript standard library doesn't have all features of my library, so what do I replace this with?  Well, often the answer is just write some more boilerplate code. It'll take you a few seconds longer, you don't take on dependency. The person coming to fix your code does haven't to know about your obscure function and to pointing out their version with the same or different names that someone else thought was better, and better looking. This can be really annoying to have all this repetitive code that looks ugly when we all want beautiful code, right.

Except, this process fundamentally has no end, ever. We're simply never going to realize state of software anywhere van that where everything is supremely satisfying. And that's an emotional realization. This was an early quote from early Facebooker, but to put it another way, you're not going to find a perfect library API, you have good looking code now will look bad in a year, and you or someone else will have to go upgrade it. You might not remember what abstraction you found was cool, today. However, it's not allGloomy. You write your code a little differently, Ellen new patterns that allow you to structure your code a different way that achieve your goal ‑‑ now, learning these patterns is quite difficult, and this is definitely a learning curve, but that makes you a better programmer in general. Large frameworks they usually is an API for every kind of use case you can just search for that API, like ask for it on stack overflow and you can find a link to it. When you learn patterns you have to read a book or tutorial or find different ways to express the same thing. It's a different way to search for things, but, essentially it's the aim problem. It's just a slightly different solution. And, if you structure a code in a way that uses patterns, instead of black box libraries, it's mouchoirs for the next person to read your code, to actually understand what's going on. And this is the most important lesson I've learned at Facebook.

It's much easier to recover from no abstraction than the wrong abstraction.

So, this kind of says a spaghetti code can be Bert than a structure code this is very counterintuitive to modern programmers, at least. It's that the structure abadd overhead to what a new coder needs to learn just to get up to speed with your code base. But, you know, like one little abstraction can't hurt, but abstractions tend to spread, because toll is just a layer of abstractions, one on top of the other, and everything you have on top of your abstraction will node the be unwound. You have to unwind every layer with a total and complete understanding of the intraquasis of that system to get back to the original layer and then rebuild it if there. And, that means that it can actually be more ‑‑ a lot easier to upgrade verbose, repetitive and explicit code than it is to upgrade an abstraction. Now I'm not saying like bad code, spaghetti code is better. It's really like Fettucci ine code.

Have you ever lived with like a large App that was built on the wrong framework?  And you tried to upgrade it but you never could, because you could never understand how the underlying framework worked. Your had an existing App that was just written in haste, it was all spaghetti code, maybe it was good spaghetti code, maybe it was Fettuccine code. A lot of abstractions lots of repetition. Which one left you with more of a usable code?  Abstraction comes with a significant cost and significant risk, so it's better to abstract to begin with and once you have a nice Feuccin e code base start finding repeated patterns, if the pattern doesn't lead to bugs, don't fix it. It might look ugly but it's not hurting anyone. Try to generalize it, and you only risk adding bugs in the generalization. It only adds surface area to hurt everyone. But once it starts causing bugs then it becomes a problem because it's repetition and some algorithms can be difficult to get right and then it starts causing bugs then you generalize, you create an abstraction, but make sure the abstraction can be used for wide variety of use cases because it has to make it worth it's weight. It might even be subject for standardtion if it's general enough. And this is where slow moving standards can actually help you. If it convenience recall enough and useful enough, it will be accepted as a standard, maybe it will be accepted as a draft and you can sort of continue from that.

But if it's not, then maybe it's not actually worth the weight it's adding, maybe you need to rethink or prove its value. Now let's talk about the DOM. There are apparently 25 methods to work with attributes alone, you can also access attributes throw properties. That's still no reason to use a J query, the browser inconsistencies could be poly filled and the rest is just basically adding some sugar. It's not solving the actual structural problem and the come Plaintiff's Exhibitty of the actual DOM, the living DOM, and that thing is the thank that leads to bugs. No and Already and Ember tries to address this by change tracking and adding ‑‑ bites on top of the DOM, you adopt have to access it directly and solves the bugs. In theory web components and similar efforts can actually work on standardizing these patterns then there's one thing you have to learn and this data mining, web components world. Except, they don't actually remove as much as they add. The surface area of the framework, these paradigms, it's huge, there's a lot of things you have to learn. Learning how to use nit a fully structured way, and the intraquasis of that is still huge. And that continues to be the case even when it's standardized. But, with this paradigm it's all necessary. And that fende tends to happen when you keep building straight on top of existing ideas.

So, sometimes joust have to rethink the whole stack. Come up with a smaller surface area. So we thought, mutation is actualry the hard part of the DOM ‑‑ mutation is actually hard part of the D onlyM so what we through it away and do it like a patriot load. We created react. We oar not trying to diverge from standard, we think functional approach taken by react means we can drop so much more of the surface area. And all we're trying to do is make it a lot easier to reason about code, without having you to think about a lot of surface area. The remaining surface area is things that you can spend time thinking about around your domain specific world. So this is the API of react . Suppose to function that gets the initial state of component, render function that you can read from the states. And a call back that sets state. You'll notice that the set state is actually the only API in to react. This is really the only API you have to understande understand in react. We also have this syntax sugar, basically because braces are difficult to read. It looks like templates, but it's not really templates, there's no repeaters. In's no special directives, there's no special conditionals, it's just plain old JavaScript.

Now, reacts internals are pretty come collated. The differing algorithm can be fairly complicated. But the surface area that you have to face as a developer to understand what's going on in React is very simple, no new APIs just a simple concept. You can build an incredibly con next App but this, we did and up until this point it sounds pretty good, right. But nothing is free. So what are we giving up?  Implicitness. React favors explicit APIs, and for you to write out your code as explicitly as possible over built‑in Magic in many cases we get request for implicit bubbling of events because it's teed use to pass a call back around or extra properties around, well, turns out this is a terrible idea. It's really difficult to follow code that depends on implicit bubbling of vents, it means that if either side disappears, you don't know where it disappeared, let's say one call disappears from your stack and later we realize that actually lead to a bug that we didn't anticipate, how do you find what?  Do you have to go through I have component and theirs of every component and extraction along the way to find where that happened?  This is just one example. If but it speaks to the idea that saving a little bit of typing is actually not a good reason enough for an abstraction.

It's much easier to recover from an explicit API by adding some sugar than to undo an explicit API. And we take new abstractions in Direct very, very seriously, while you is to live with a little bit of boilerplate (React) you will probably understand and refactor your code in the future much easier. We make mistakes too, of course.

Um, if you're used to React you might have noticed that's not actually how you write React right now we built our own class extraction. It was perhaps convenient. But in the next version of React we're deprecate that and going all in on the ES 6 class, it's not an extended verse of ES 6 classes just ES 6 classes, because it's not a one to one mapping it means a little bit more boilerplate in some cases but it means that since we're removing proprietary feature from the library, you can use whatever abstraction you want. Preferably we'll just use standard JavaScripts so we don't add extra weight to our industry. But, if you railly do want to use a third party library, since we provide the standard class system it means that we can accept any kind of third party class system as well. Because the standard represents an intermediate representation that can be shared across libraries, this causes de‑couping as a side effect. Now think about that for a minute, React already has a small surface area, removing proprietary features from the framework. Now, just because you should mostly use standard language, it doesn't mean you have to use all of it. So, JavaScript already has a huge service area if you want to keep adding more stuff to it, then we have to remove something, because otherwise it will just keep growing and our industry will run out of head space. Or whatever. But this is already being done through linters, strict mode, VMs only optimize certain patterns. So, the next thing I want to work on is basically just formalizing this step of the process. How do we remove features from existing language.  I mean they'll never be removed from the web, because you can't remove things from the web, but it can be removed from our industry's mental service area.

So, let's put JS on a diet. Use poly fills instead of libraries, write explicit and repetitive code, only abstract to actually solve buttings, not because it looks better. And rethink the stack and purge. And start over again. Thank you
